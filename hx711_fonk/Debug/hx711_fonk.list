
hx711_fonk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001484  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001590  08001590  00011590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015b4  080015b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080015b4  080015b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015b4  080015b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015b4  080015b4  000115b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015b8  080015b8  000115b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080015bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000000c  080015c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  080015c8  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c1f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001510  00000000  00000000  00027c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000400  00000000  00000000  00029168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000368  00000000  00000000  00029568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013fc1  00000000  00000000  000298d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004fd5  00000000  00000000  0003d891  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00068aa5  00000000  00000000  00042866  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ab30b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e1c  00000000  00000000  000ab388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001578 	.word	0x08001578

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001578 	.word	0x08001578

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <HAL_Init+0x28>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a07      	ldr	r2, [pc, #28]	; (8000390 <HAL_Init+0x28>)
 8000372:	f043 0310 	orr.w	r3, r3, #16
 8000376:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000378:	2003      	movs	r0, #3
 800037a:	f000 f907 	bl	800058c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800037e:	2000      	movs	r0, #0
 8000380:	f000 f808 	bl	8000394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000384:	f001 f816 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000388:	2300      	movs	r3, #0
}
 800038a:	4618      	mov	r0, r3
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40022000 	.word	0x40022000

08000394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <HAL_InitTick+0x54>)
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	4b12      	ldr	r3, [pc, #72]	; (80003ec <HAL_InitTick+0x58>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	4619      	mov	r1, r3
 80003a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80003ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f911 	bl	80005da <HAL_SYSTICK_Config>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003be:	2301      	movs	r3, #1
 80003c0:	e00e      	b.n	80003e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2b0f      	cmp	r3, #15
 80003c6:	d80a      	bhi.n	80003de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003c8:	2200      	movs	r2, #0
 80003ca:	6879      	ldr	r1, [r7, #4]
 80003cc:	f04f 30ff 	mov.w	r0, #4294967295
 80003d0:	f000 f8e7 	bl	80005a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003d4:	4a06      	ldr	r2, [pc, #24]	; (80003f0 <HAL_InitTick+0x5c>)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003da:	2300      	movs	r3, #0
 80003dc:	e000      	b.n	80003e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80003de:	2301      	movs	r3, #1
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20000008 	.word	0x20000008
 80003ec:	20000004 	.word	0x20000004
 80003f0:	20000000 	.word	0x20000000

080003f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <HAL_IncTick+0x1c>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	461a      	mov	r2, r3
 80003fe:	4b05      	ldr	r3, [pc, #20]	; (8000414 <HAL_IncTick+0x20>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4413      	add	r3, r2
 8000404:	4a03      	ldr	r2, [pc, #12]	; (8000414 <HAL_IncTick+0x20>)
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	20000004 	.word	0x20000004
 8000414:	20000034 	.word	0x20000034

08000418 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  return uwTick;
 800041c:	4b02      	ldr	r3, [pc, #8]	; (8000428 <HAL_GetTick+0x10>)
 800041e:	681b      	ldr	r3, [r3, #0]
}
 8000420:	4618      	mov	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	20000034 	.word	0x20000034

0800042c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	f003 0307 	and.w	r3, r3, #7
 800043a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <NVIC_SetPriorityGrouping+0x44>)
 800043e:	68db      	ldr	r3, [r3, #12]
 8000440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000442:	68ba      	ldr	r2, [r7, #8]
 8000444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000448:	4013      	ands	r3, r2
 800044a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800045c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800045e:	4a04      	ldr	r2, [pc, #16]	; (8000470 <NVIC_SetPriorityGrouping+0x44>)
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	60d3      	str	r3, [r2, #12]
}
 8000464:	bf00      	nop
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	e000ed00 	.word	0xe000ed00

08000474 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000478:	4b04      	ldr	r3, [pc, #16]	; (800048c <NVIC_GetPriorityGrouping+0x18>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	0a1b      	lsrs	r3, r3, #8
 800047e:	f003 0307 	and.w	r3, r3, #7
}
 8000482:	4618      	mov	r0, r3
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	e000ed00 	.word	0xe000ed00

08000490 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	6039      	str	r1, [r7, #0]
 800049a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800049c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	da0b      	bge.n	80004bc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	b2da      	uxtb	r2, r3
 80004a8:	490c      	ldr	r1, [pc, #48]	; (80004dc <NVIC_SetPriority+0x4c>)
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	f003 030f 	and.w	r3, r3, #15
 80004b0:	3b04      	subs	r3, #4
 80004b2:	0112      	lsls	r2, r2, #4
 80004b4:	b2d2      	uxtb	r2, r2
 80004b6:	440b      	add	r3, r1
 80004b8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004ba:	e009      	b.n	80004d0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	4907      	ldr	r1, [pc, #28]	; (80004e0 <NVIC_SetPriority+0x50>)
 80004c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c6:	0112      	lsls	r2, r2, #4
 80004c8:	b2d2      	uxtb	r2, r2
 80004ca:	440b      	add	r3, r1
 80004cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	e000ed00 	.word	0xe000ed00
 80004e0:	e000e100 	.word	0xe000e100

080004e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b089      	sub	sp, #36	; 0x24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f003 0307 	and.w	r3, r3, #7
 80004f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004f8:	69fb      	ldr	r3, [r7, #28]
 80004fa:	f1c3 0307 	rsb	r3, r3, #7
 80004fe:	2b04      	cmp	r3, #4
 8000500:	bf28      	it	cs
 8000502:	2304      	movcs	r3, #4
 8000504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	3304      	adds	r3, #4
 800050a:	2b06      	cmp	r3, #6
 800050c:	d902      	bls.n	8000514 <NVIC_EncodePriority+0x30>
 800050e:	69fb      	ldr	r3, [r7, #28]
 8000510:	3b03      	subs	r3, #3
 8000512:	e000      	b.n	8000516 <NVIC_EncodePriority+0x32>
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000518:	f04f 32ff 	mov.w	r2, #4294967295
 800051c:	69bb      	ldr	r3, [r7, #24]
 800051e:	fa02 f303 	lsl.w	r3, r2, r3
 8000522:	43da      	mvns	r2, r3
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	401a      	ands	r2, r3
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800052c:	f04f 31ff 	mov.w	r1, #4294967295
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	fa01 f303 	lsl.w	r3, r1, r3
 8000536:	43d9      	mvns	r1, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800053c:	4313      	orrs	r3, r2
         );
}
 800053e:	4618      	mov	r0, r3
 8000540:	3724      	adds	r7, #36	; 0x24
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr

08000548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3b01      	subs	r3, #1
 8000554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000558:	d301      	bcc.n	800055e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800055a:	2301      	movs	r3, #1
 800055c:	e00f      	b.n	800057e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800055e:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <SysTick_Config+0x40>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3b01      	subs	r3, #1
 8000564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000566:	210f      	movs	r1, #15
 8000568:	f04f 30ff 	mov.w	r0, #4294967295
 800056c:	f7ff ff90 	bl	8000490 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <SysTick_Config+0x40>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000576:	4b04      	ldr	r3, [pc, #16]	; (8000588 <SysTick_Config+0x40>)
 8000578:	2207      	movs	r2, #7
 800057a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800057c:	2300      	movs	r3, #0
}
 800057e:	4618      	mov	r0, r3
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	e000e010 	.word	0xe000e010

0800058c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f7ff ff49 	bl	800042c <NVIC_SetPriorityGrouping>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b086      	sub	sp, #24
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	4603      	mov	r3, r0
 80005aa:	60b9      	str	r1, [r7, #8]
 80005ac:	607a      	str	r2, [r7, #4]
 80005ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80005b4:	f7ff ff5e 	bl	8000474 <NVIC_GetPriorityGrouping>
 80005b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	68b9      	ldr	r1, [r7, #8]
 80005be:	6978      	ldr	r0, [r7, #20]
 80005c0:	f7ff ff90 	bl	80004e4 <NVIC_EncodePriority>
 80005c4:	4602      	mov	r2, r0
 80005c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005ca:	4611      	mov	r1, r2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ff5f 	bl	8000490 <NVIC_SetPriority>
}
 80005d2:	bf00      	nop
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f7ff ffb0 	bl	8000548 <SysTick_Config>
 80005e8:	4603      	mov	r3, r0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b08b      	sub	sp, #44	; 0x2c
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000612:	2300      	movs	r3, #0
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
 8000616:	e127      	b.n	8000868 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000618:	2201      	movs	r2, #1
 800061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	69fa      	ldr	r2, [r7, #28]
 8000628:	4013      	ands	r3, r2
 800062a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800062c:	69ba      	ldr	r2, [r7, #24]
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	429a      	cmp	r2, r3
 8000632:	f040 8116 	bne.w	8000862 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	2b12      	cmp	r3, #18
 800063c:	d034      	beq.n	80006a8 <HAL_GPIO_Init+0xb4>
 800063e:	2b12      	cmp	r3, #18
 8000640:	d80d      	bhi.n	800065e <HAL_GPIO_Init+0x6a>
 8000642:	2b02      	cmp	r3, #2
 8000644:	d02b      	beq.n	800069e <HAL_GPIO_Init+0xaa>
 8000646:	2b02      	cmp	r3, #2
 8000648:	d804      	bhi.n	8000654 <HAL_GPIO_Init+0x60>
 800064a:	2b00      	cmp	r3, #0
 800064c:	d031      	beq.n	80006b2 <HAL_GPIO_Init+0xbe>
 800064e:	2b01      	cmp	r3, #1
 8000650:	d01c      	beq.n	800068c <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000652:	e048      	b.n	80006e6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000654:	2b03      	cmp	r3, #3
 8000656:	d043      	beq.n	80006e0 <HAL_GPIO_Init+0xec>
 8000658:	2b11      	cmp	r3, #17
 800065a:	d01b      	beq.n	8000694 <HAL_GPIO_Init+0xa0>
          break;
 800065c:	e043      	b.n	80006e6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800065e:	4a87      	ldr	r2, [pc, #540]	; (800087c <HAL_GPIO_Init+0x288>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d026      	beq.n	80006b2 <HAL_GPIO_Init+0xbe>
 8000664:	4a85      	ldr	r2, [pc, #532]	; (800087c <HAL_GPIO_Init+0x288>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d806      	bhi.n	8000678 <HAL_GPIO_Init+0x84>
 800066a:	4a85      	ldr	r2, [pc, #532]	; (8000880 <HAL_GPIO_Init+0x28c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d020      	beq.n	80006b2 <HAL_GPIO_Init+0xbe>
 8000670:	4a84      	ldr	r2, [pc, #528]	; (8000884 <HAL_GPIO_Init+0x290>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d01d      	beq.n	80006b2 <HAL_GPIO_Init+0xbe>
          break;
 8000676:	e036      	b.n	80006e6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000678:	4a83      	ldr	r2, [pc, #524]	; (8000888 <HAL_GPIO_Init+0x294>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d019      	beq.n	80006b2 <HAL_GPIO_Init+0xbe>
 800067e:	4a83      	ldr	r2, [pc, #524]	; (800088c <HAL_GPIO_Init+0x298>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d016      	beq.n	80006b2 <HAL_GPIO_Init+0xbe>
 8000684:	4a82      	ldr	r2, [pc, #520]	; (8000890 <HAL_GPIO_Init+0x29c>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d013      	beq.n	80006b2 <HAL_GPIO_Init+0xbe>
          break;
 800068a:	e02c      	b.n	80006e6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	623b      	str	r3, [r7, #32]
          break;
 8000692:	e028      	b.n	80006e6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	3304      	adds	r3, #4
 800069a:	623b      	str	r3, [r7, #32]
          break;
 800069c:	e023      	b.n	80006e6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	68db      	ldr	r3, [r3, #12]
 80006a2:	3308      	adds	r3, #8
 80006a4:	623b      	str	r3, [r7, #32]
          break;
 80006a6:	e01e      	b.n	80006e6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	330c      	adds	r3, #12
 80006ae:	623b      	str	r3, [r7, #32]
          break;
 80006b0:	e019      	b.n	80006e6 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d102      	bne.n	80006c0 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80006ba:	2304      	movs	r3, #4
 80006bc:	623b      	str	r3, [r7, #32]
          break;
 80006be:	e012      	b.n	80006e6 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d105      	bne.n	80006d4 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006c8:	2308      	movs	r3, #8
 80006ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	69fa      	ldr	r2, [r7, #28]
 80006d0:	611a      	str	r2, [r3, #16]
          break;
 80006d2:	e008      	b.n	80006e6 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006d4:	2308      	movs	r3, #8
 80006d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	69fa      	ldr	r2, [r7, #28]
 80006dc:	615a      	str	r2, [r3, #20]
          break;
 80006de:	e002      	b.n	80006e6 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
          break;
 80006e4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	2bff      	cmp	r3, #255	; 0xff
 80006ea:	d801      	bhi.n	80006f0 <HAL_GPIO_Init+0xfc>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	e001      	b.n	80006f4 <HAL_GPIO_Init+0x100>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3304      	adds	r3, #4
 80006f4:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	2bff      	cmp	r3, #255	; 0xff
 80006fa:	d802      	bhi.n	8000702 <HAL_GPIO_Init+0x10e>
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	e002      	b.n	8000708 <HAL_GPIO_Init+0x114>
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	3b08      	subs	r3, #8
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	210f      	movs	r1, #15
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43db      	mvns	r3, r3
 8000718:	401a      	ands	r2, r3
 800071a:	6a39      	ldr	r1, [r7, #32]
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	431a      	orrs	r2, r3
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	2b00      	cmp	r3, #0
 8000732:	f000 8096 	beq.w	8000862 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000736:	4b57      	ldr	r3, [pc, #348]	; (8000894 <HAL_GPIO_Init+0x2a0>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a56      	ldr	r2, [pc, #344]	; (8000894 <HAL_GPIO_Init+0x2a0>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6193      	str	r3, [r2, #24]
 8000742:	4b54      	ldr	r3, [pc, #336]	; (8000894 <HAL_GPIO_Init+0x2a0>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800074e:	4a52      	ldr	r2, [pc, #328]	; (8000898 <HAL_GPIO_Init+0x2a4>)
 8000750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000752:	089b      	lsrs	r3, r3, #2
 8000754:	3302      	adds	r3, #2
 8000756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800075a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800075c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075e:	f003 0303 	and.w	r3, r3, #3
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	220f      	movs	r2, #15
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43db      	mvns	r3, r3
 800076c:	697a      	ldr	r2, [r7, #20]
 800076e:	4013      	ands	r3, r2
 8000770:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a49      	ldr	r2, [pc, #292]	; (800089c <HAL_GPIO_Init+0x2a8>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d013      	beq.n	80007a2 <HAL_GPIO_Init+0x1ae>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a48      	ldr	r2, [pc, #288]	; (80008a0 <HAL_GPIO_Init+0x2ac>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d00d      	beq.n	800079e <HAL_GPIO_Init+0x1aa>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a47      	ldr	r2, [pc, #284]	; (80008a4 <HAL_GPIO_Init+0x2b0>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d007      	beq.n	800079a <HAL_GPIO_Init+0x1a6>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a46      	ldr	r2, [pc, #280]	; (80008a8 <HAL_GPIO_Init+0x2b4>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d101      	bne.n	8000796 <HAL_GPIO_Init+0x1a2>
 8000792:	2303      	movs	r3, #3
 8000794:	e006      	b.n	80007a4 <HAL_GPIO_Init+0x1b0>
 8000796:	2304      	movs	r3, #4
 8000798:	e004      	b.n	80007a4 <HAL_GPIO_Init+0x1b0>
 800079a:	2302      	movs	r3, #2
 800079c:	e002      	b.n	80007a4 <HAL_GPIO_Init+0x1b0>
 800079e:	2301      	movs	r3, #1
 80007a0:	e000      	b.n	80007a4 <HAL_GPIO_Init+0x1b0>
 80007a2:	2300      	movs	r3, #0
 80007a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007a6:	f002 0203 	and.w	r2, r2, #3
 80007aa:	0092      	lsls	r2, r2, #2
 80007ac:	4093      	lsls	r3, r2
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80007b4:	4938      	ldr	r1, [pc, #224]	; (8000898 <HAL_GPIO_Init+0x2a4>)
 80007b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b8:	089b      	lsrs	r3, r3, #2
 80007ba:	3302      	adds	r3, #2
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d006      	beq.n	80007dc <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80007ce:	4b37      	ldr	r3, [pc, #220]	; (80008ac <HAL_GPIO_Init+0x2b8>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4936      	ldr	r1, [pc, #216]	; (80008ac <HAL_GPIO_Init+0x2b8>)
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	600b      	str	r3, [r1, #0]
 80007da:	e006      	b.n	80007ea <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80007dc:	4b33      	ldr	r3, [pc, #204]	; (80008ac <HAL_GPIO_Init+0x2b8>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	43db      	mvns	r3, r3
 80007e4:	4931      	ldr	r1, [pc, #196]	; (80008ac <HAL_GPIO_Init+0x2b8>)
 80007e6:	4013      	ands	r3, r2
 80007e8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d006      	beq.n	8000804 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80007f6:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <HAL_GPIO_Init+0x2b8>)
 80007f8:	685a      	ldr	r2, [r3, #4]
 80007fa:	492c      	ldr	r1, [pc, #176]	; (80008ac <HAL_GPIO_Init+0x2b8>)
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	4313      	orrs	r3, r2
 8000800:	604b      	str	r3, [r1, #4]
 8000802:	e006      	b.n	8000812 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000804:	4b29      	ldr	r3, [pc, #164]	; (80008ac <HAL_GPIO_Init+0x2b8>)
 8000806:	685a      	ldr	r2, [r3, #4]
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	43db      	mvns	r3, r3
 800080c:	4927      	ldr	r1, [pc, #156]	; (80008ac <HAL_GPIO_Init+0x2b8>)
 800080e:	4013      	ands	r3, r2
 8000810:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800081a:	2b00      	cmp	r3, #0
 800081c:	d006      	beq.n	800082c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800081e:	4b23      	ldr	r3, [pc, #140]	; (80008ac <HAL_GPIO_Init+0x2b8>)
 8000820:	689a      	ldr	r2, [r3, #8]
 8000822:	4922      	ldr	r1, [pc, #136]	; (80008ac <HAL_GPIO_Init+0x2b8>)
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	4313      	orrs	r3, r2
 8000828:	608b      	str	r3, [r1, #8]
 800082a:	e006      	b.n	800083a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <HAL_GPIO_Init+0x2b8>)
 800082e:	689a      	ldr	r2, [r3, #8]
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	43db      	mvns	r3, r3
 8000834:	491d      	ldr	r1, [pc, #116]	; (80008ac <HAL_GPIO_Init+0x2b8>)
 8000836:	4013      	ands	r3, r2
 8000838:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000842:	2b00      	cmp	r3, #0
 8000844:	d006      	beq.n	8000854 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <HAL_GPIO_Init+0x2b8>)
 8000848:	68da      	ldr	r2, [r3, #12]
 800084a:	4918      	ldr	r1, [pc, #96]	; (80008ac <HAL_GPIO_Init+0x2b8>)
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	4313      	orrs	r3, r2
 8000850:	60cb      	str	r3, [r1, #12]
 8000852:	e006      	b.n	8000862 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_GPIO_Init+0x2b8>)
 8000856:	68da      	ldr	r2, [r3, #12]
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	43db      	mvns	r3, r3
 800085c:	4913      	ldr	r1, [pc, #76]	; (80008ac <HAL_GPIO_Init+0x2b8>)
 800085e:	4013      	ands	r3, r2
 8000860:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	3301      	adds	r3, #1
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
 8000868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086a:	2b0f      	cmp	r3, #15
 800086c:	f67f aed4 	bls.w	8000618 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000870:	bf00      	nop
 8000872:	372c      	adds	r7, #44	; 0x2c
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	10210000 	.word	0x10210000
 8000880:	10110000 	.word	0x10110000
 8000884:	10120000 	.word	0x10120000
 8000888:	10310000 	.word	0x10310000
 800088c:	10320000 	.word	0x10320000
 8000890:	10220000 	.word	0x10220000
 8000894:	40021000 	.word	0x40021000
 8000898:	40010000 	.word	0x40010000
 800089c:	40010800 	.word	0x40010800
 80008a0:	40010c00 	.word	0x40010c00
 80008a4:	40011000 	.word	0x40011000
 80008a8:	40011400 	.word	0x40011400
 80008ac:	40010400 	.word	0x40010400

080008b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689a      	ldr	r2, [r3, #8]
 80008c0:	887b      	ldrh	r3, [r7, #2]
 80008c2:	4013      	ands	r3, r2
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80008c8:	2301      	movs	r3, #1
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	e001      	b.n	80008d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	460b      	mov	r3, r1
 80008e8:	807b      	strh	r3, [r7, #2]
 80008ea:	4613      	mov	r3, r2
 80008ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80008ee:	787b      	ldrb	r3, [r7, #1]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d003      	beq.n	80008fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80008f4:	887a      	ldrh	r2, [r7, #2]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80008fa:	e003      	b.n	8000904 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008fc:	887b      	ldrh	r3, [r7, #2]
 80008fe:	041a      	lsls	r2, r3, #16
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	611a      	str	r2, [r3, #16]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
	...

08000910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	2b00      	cmp	r3, #0
 8000926:	f000 8087 	beq.w	8000a38 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800092a:	4b92      	ldr	r3, [pc, #584]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	f003 030c 	and.w	r3, r3, #12
 8000932:	2b04      	cmp	r3, #4
 8000934:	d00c      	beq.n	8000950 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000936:	4b8f      	ldr	r3, [pc, #572]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f003 030c 	and.w	r3, r3, #12
 800093e:	2b08      	cmp	r3, #8
 8000940:	d112      	bne.n	8000968 <HAL_RCC_OscConfig+0x58>
 8000942:	4b8c      	ldr	r3, [pc, #560]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800094a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800094e:	d10b      	bne.n	8000968 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000950:	4b88      	ldr	r3, [pc, #544]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000958:	2b00      	cmp	r3, #0
 800095a:	d06c      	beq.n	8000a36 <HAL_RCC_OscConfig+0x126>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d168      	bne.n	8000a36 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000964:	2301      	movs	r3, #1
 8000966:	e22d      	b.n	8000dc4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000970:	d106      	bne.n	8000980 <HAL_RCC_OscConfig+0x70>
 8000972:	4b80      	ldr	r3, [pc, #512]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a7f      	ldr	r2, [pc, #508]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800097c:	6013      	str	r3, [r2, #0]
 800097e:	e02e      	b.n	80009de <HAL_RCC_OscConfig+0xce>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d10c      	bne.n	80009a2 <HAL_RCC_OscConfig+0x92>
 8000988:	4b7a      	ldr	r3, [pc, #488]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a79      	ldr	r2, [pc, #484]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 800098e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	4b77      	ldr	r3, [pc, #476]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a76      	ldr	r2, [pc, #472]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 800099a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	e01d      	b.n	80009de <HAL_RCC_OscConfig+0xce>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009aa:	d10c      	bne.n	80009c6 <HAL_RCC_OscConfig+0xb6>
 80009ac:	4b71      	ldr	r3, [pc, #452]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a70      	ldr	r2, [pc, #448]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 80009b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	4b6e      	ldr	r3, [pc, #440]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a6d      	ldr	r2, [pc, #436]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 80009be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	e00b      	b.n	80009de <HAL_RCC_OscConfig+0xce>
 80009c6:	4b6b      	ldr	r3, [pc, #428]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a6a      	ldr	r2, [pc, #424]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 80009cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	4b68      	ldr	r3, [pc, #416]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a67      	ldr	r2, [pc, #412]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 80009d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009dc:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d013      	beq.n	8000a0e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009e6:	f7ff fd17 	bl	8000418 <HAL_GetTick>
 80009ea:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ec:	e008      	b.n	8000a00 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009ee:	f7ff fd13 	bl	8000418 <HAL_GetTick>
 80009f2:	4602      	mov	r2, r0
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	2b64      	cmp	r3, #100	; 0x64
 80009fa:	d901      	bls.n	8000a00 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80009fc:	2303      	movs	r3, #3
 80009fe:	e1e1      	b.n	8000dc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a00:	4b5c      	ldr	r3, [pc, #368]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0f0      	beq.n	80009ee <HAL_RCC_OscConfig+0xde>
 8000a0c:	e014      	b.n	8000a38 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a0e:	f7ff fd03 	bl	8000418 <HAL_GetTick>
 8000a12:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a14:	e008      	b.n	8000a28 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a16:	f7ff fcff 	bl	8000418 <HAL_GetTick>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	2b64      	cmp	r3, #100	; 0x64
 8000a22:	d901      	bls.n	8000a28 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000a24:	2303      	movs	r3, #3
 8000a26:	e1cd      	b.n	8000dc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a28:	4b52      	ldr	r3, [pc, #328]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1f0      	bne.n	8000a16 <HAL_RCC_OscConfig+0x106>
 8000a34:	e000      	b.n	8000a38 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a36:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d063      	beq.n	8000b0c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a44:	4b4b      	ldr	r3, [pc, #300]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 030c 	and.w	r3, r3, #12
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d00b      	beq.n	8000a68 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a50:	4b48      	ldr	r3, [pc, #288]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 030c 	and.w	r3, r3, #12
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d11c      	bne.n	8000a96 <HAL_RCC_OscConfig+0x186>
 8000a5c:	4b45      	ldr	r3, [pc, #276]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d116      	bne.n	8000a96 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a68:	4b42      	ldr	r3, [pc, #264]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f003 0302 	and.w	r3, r3, #2
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d005      	beq.n	8000a80 <HAL_RCC_OscConfig+0x170>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d001      	beq.n	8000a80 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e1a1      	b.n	8000dc4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a80:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	4939      	ldr	r1, [pc, #228]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000a90:	4313      	orrs	r3, r2
 8000a92:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a94:	e03a      	b.n	8000b0c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	691b      	ldr	r3, [r3, #16]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d020      	beq.n	8000ae0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a9e:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <HAL_RCC_OscConfig+0x268>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aa4:	f7ff fcb8 	bl	8000418 <HAL_GetTick>
 8000aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aaa:	e008      	b.n	8000abe <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aac:	f7ff fcb4 	bl	8000418 <HAL_GetTick>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d901      	bls.n	8000abe <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000aba:	2303      	movs	r3, #3
 8000abc:	e182      	b.n	8000dc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000abe:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0f0      	beq.n	8000aac <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aca:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	4926      	ldr	r1, [pc, #152]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000ada:	4313      	orrs	r3, r2
 8000adc:	600b      	str	r3, [r1, #0]
 8000ade:	e015      	b.n	8000b0c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ae0:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <HAL_RCC_OscConfig+0x268>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ae6:	f7ff fc97 	bl	8000418 <HAL_GetTick>
 8000aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000aec:	e008      	b.n	8000b00 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aee:	f7ff fc93 	bl	8000418 <HAL_GetTick>
 8000af2:	4602      	mov	r2, r0
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d901      	bls.n	8000b00 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000afc:	2303      	movs	r3, #3
 8000afe:	e161      	b.n	8000dc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1f0      	bne.n	8000aee <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f003 0308 	and.w	r3, r3, #8
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d039      	beq.n	8000b8c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d019      	beq.n	8000b54 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_RCC_OscConfig+0x26c>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b26:	f7ff fc77 	bl	8000418 <HAL_GetTick>
 8000b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b2c:	e008      	b.n	8000b40 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b2e:	f7ff fc73 	bl	8000418 <HAL_GetTick>
 8000b32:	4602      	mov	r2, r0
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d901      	bls.n	8000b40 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	e141      	b.n	8000dc4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d0f0      	beq.n	8000b2e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 fab1 	bl	80010b4 <RCC_Delay>
 8000b52:	e01b      	b.n	8000b8c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_RCC_OscConfig+0x26c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b5a:	f7ff fc5d 	bl	8000418 <HAL_GetTick>
 8000b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b60:	e00e      	b.n	8000b80 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b62:	f7ff fc59 	bl	8000418 <HAL_GetTick>
 8000b66:	4602      	mov	r2, r0
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d907      	bls.n	8000b80 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000b70:	2303      	movs	r3, #3
 8000b72:	e127      	b.n	8000dc4 <HAL_RCC_OscConfig+0x4b4>
 8000b74:	40021000 	.word	0x40021000
 8000b78:	42420000 	.word	0x42420000
 8000b7c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b80:	4b92      	ldr	r3, [pc, #584]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1ea      	bne.n	8000b62 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f000 80a6 	beq.w	8000ce6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b9e:	4b8b      	ldr	r3, [pc, #556]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10d      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b88      	ldr	r3, [pc, #544]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	4a87      	ldr	r2, [pc, #540]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	61d3      	str	r3, [r2, #28]
 8000bb6:	4b85      	ldr	r3, [pc, #532]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bc6:	4b82      	ldr	r3, [pc, #520]	; (8000dd0 <HAL_RCC_OscConfig+0x4c0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d118      	bne.n	8000c04 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bd2:	4b7f      	ldr	r3, [pc, #508]	; (8000dd0 <HAL_RCC_OscConfig+0x4c0>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a7e      	ldr	r2, [pc, #504]	; (8000dd0 <HAL_RCC_OscConfig+0x4c0>)
 8000bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000bde:	f7ff fc1b 	bl	8000418 <HAL_GetTick>
 8000be2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000be4:	e008      	b.n	8000bf8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000be6:	f7ff fc17 	bl	8000418 <HAL_GetTick>
 8000bea:	4602      	mov	r2, r0
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	2b64      	cmp	r3, #100	; 0x64
 8000bf2:	d901      	bls.n	8000bf8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	e0e5      	b.n	8000dc4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bf8:	4b75      	ldr	r3, [pc, #468]	; (8000dd0 <HAL_RCC_OscConfig+0x4c0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d0f0      	beq.n	8000be6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d106      	bne.n	8000c1a <HAL_RCC_OscConfig+0x30a>
 8000c0c:	4b6f      	ldr	r3, [pc, #444]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	4a6e      	ldr	r2, [pc, #440]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6213      	str	r3, [r2, #32]
 8000c18:	e02d      	b.n	8000c76 <HAL_RCC_OscConfig+0x366>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d10c      	bne.n	8000c3c <HAL_RCC_OscConfig+0x32c>
 8000c22:	4b6a      	ldr	r3, [pc, #424]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000c24:	6a1b      	ldr	r3, [r3, #32]
 8000c26:	4a69      	ldr	r2, [pc, #420]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000c28:	f023 0301 	bic.w	r3, r3, #1
 8000c2c:	6213      	str	r3, [r2, #32]
 8000c2e:	4b67      	ldr	r3, [pc, #412]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000c30:	6a1b      	ldr	r3, [r3, #32]
 8000c32:	4a66      	ldr	r2, [pc, #408]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000c34:	f023 0304 	bic.w	r3, r3, #4
 8000c38:	6213      	str	r3, [r2, #32]
 8000c3a:	e01c      	b.n	8000c76 <HAL_RCC_OscConfig+0x366>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	2b05      	cmp	r3, #5
 8000c42:	d10c      	bne.n	8000c5e <HAL_RCC_OscConfig+0x34e>
 8000c44:	4b61      	ldr	r3, [pc, #388]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	4a60      	ldr	r2, [pc, #384]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6213      	str	r3, [r2, #32]
 8000c50:	4b5e      	ldr	r3, [pc, #376]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000c52:	6a1b      	ldr	r3, [r3, #32]
 8000c54:	4a5d      	ldr	r2, [pc, #372]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6213      	str	r3, [r2, #32]
 8000c5c:	e00b      	b.n	8000c76 <HAL_RCC_OscConfig+0x366>
 8000c5e:	4b5b      	ldr	r3, [pc, #364]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000c60:	6a1b      	ldr	r3, [r3, #32]
 8000c62:	4a5a      	ldr	r2, [pc, #360]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000c64:	f023 0301 	bic.w	r3, r3, #1
 8000c68:	6213      	str	r3, [r2, #32]
 8000c6a:	4b58      	ldr	r3, [pc, #352]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000c6c:	6a1b      	ldr	r3, [r3, #32]
 8000c6e:	4a57      	ldr	r2, [pc, #348]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000c70:	f023 0304 	bic.w	r3, r3, #4
 8000c74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d015      	beq.n	8000caa <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c7e:	f7ff fbcb 	bl	8000418 <HAL_GetTick>
 8000c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c84:	e00a      	b.n	8000c9c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c86:	f7ff fbc7 	bl	8000418 <HAL_GetTick>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d901      	bls.n	8000c9c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e093      	b.n	8000dc4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c9c:	4b4b      	ldr	r3, [pc, #300]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000c9e:	6a1b      	ldr	r3, [r3, #32]
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0ee      	beq.n	8000c86 <HAL_RCC_OscConfig+0x376>
 8000ca8:	e014      	b.n	8000cd4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000caa:	f7ff fbb5 	bl	8000418 <HAL_GetTick>
 8000cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cb0:	e00a      	b.n	8000cc8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cb2:	f7ff fbb1 	bl	8000418 <HAL_GetTick>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d901      	bls.n	8000cc8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e07d      	b.n	8000dc4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cc8:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000cca:	6a1b      	ldr	r3, [r3, #32]
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1ee      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000cd4:	7dfb      	ldrb	r3, [r7, #23]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d105      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cda:	4b3c      	ldr	r3, [pc, #240]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	4a3b      	ldr	r2, [pc, #236]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d069      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cee:	4b37      	ldr	r3, [pc, #220]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 030c 	and.w	r3, r3, #12
 8000cf6:	2b08      	cmp	r3, #8
 8000cf8:	d061      	beq.n	8000dbe <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d146      	bne.n	8000d90 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d02:	4b34      	ldr	r3, [pc, #208]	; (8000dd4 <HAL_RCC_OscConfig+0x4c4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fb86 	bl	8000418 <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d10:	f7ff fb82 	bl	8000418 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e050      	b.n	8000dc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d22:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1f0      	bne.n	8000d10 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a1b      	ldr	r3, [r3, #32]
 8000d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d36:	d108      	bne.n	8000d4a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d38:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	4921      	ldr	r1, [pc, #132]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000d46:	4313      	orrs	r3, r2
 8000d48:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6a19      	ldr	r1, [r3, #32]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5a:	430b      	orrs	r3, r1
 8000d5c:	491b      	ldr	r1, [pc, #108]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <HAL_RCC_OscConfig+0x4c4>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d68:	f7ff fb56 	bl	8000418 <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d70:	f7ff fb52 	bl	8000418 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e020      	b.n	8000dc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f0      	beq.n	8000d70 <HAL_RCC_OscConfig+0x460>
 8000d8e:	e018      	b.n	8000dc2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_RCC_OscConfig+0x4c4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d96:	f7ff fb3f 	bl	8000418 <HAL_GetTick>
 8000d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d9e:	f7ff fb3b 	bl	8000418 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e009      	b.n	8000dc4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_RCC_OscConfig+0x4bc>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1f0      	bne.n	8000d9e <HAL_RCC_OscConfig+0x48e>
 8000dbc:	e001      	b.n	8000dc2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e000      	b.n	8000dc4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40007000 	.word	0x40007000
 8000dd4:	42420060 	.word	0x42420060

08000dd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000de6:	4b7e      	ldr	r3, [pc, #504]	; (8000fe0 <HAL_RCC_ClockConfig+0x208>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d910      	bls.n	8000e16 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000df4:	4b7a      	ldr	r3, [pc, #488]	; (8000fe0 <HAL_RCC_ClockConfig+0x208>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f023 0207 	bic.w	r2, r3, #7
 8000dfc:	4978      	ldr	r1, [pc, #480]	; (8000fe0 <HAL_RCC_ClockConfig+0x208>)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e04:	4b76      	ldr	r3, [pc, #472]	; (8000fe0 <HAL_RCC_ClockConfig+0x208>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d001      	beq.n	8000e16 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e0e0      	b.n	8000fd8 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d020      	beq.n	8000e64 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d005      	beq.n	8000e3a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e2e:	4b6d      	ldr	r3, [pc, #436]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	4a6c      	ldr	r2, [pc, #432]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000e34:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000e38:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d005      	beq.n	8000e52 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e46:	4b67      	ldr	r3, [pc, #412]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	4a66      	ldr	r2, [pc, #408]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000e4c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000e50:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e52:	4b64      	ldr	r3, [pc, #400]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	4961      	ldr	r1, [pc, #388]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000e60:	4313      	orrs	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d06a      	beq.n	8000f46 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d107      	bne.n	8000e88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e78:	4b5a      	ldr	r3, [pc, #360]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d115      	bne.n	8000eb0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e0a7      	b.n	8000fd8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d107      	bne.n	8000ea0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e90:	4b54      	ldr	r3, [pc, #336]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d109      	bne.n	8000eb0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e09b      	b.n	8000fd8 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea0:	4b50      	ldr	r3, [pc, #320]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d101      	bne.n	8000eb0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e093      	b.n	8000fd8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eb0:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f023 0203 	bic.w	r2, r3, #3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	4949      	ldr	r1, [pc, #292]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ec2:	f7ff faa9 	bl	8000418 <HAL_GetTick>
 8000ec6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d112      	bne.n	8000ef6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ed0:	e00a      	b.n	8000ee8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ed2:	f7ff faa1 	bl	8000418 <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e077      	b.n	8000fd8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ee8:	4b3e      	ldr	r3, [pc, #248]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d1ee      	bne.n	8000ed2 <HAL_RCC_ClockConfig+0xfa>
 8000ef4:	e027      	b.n	8000f46 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d11d      	bne.n	8000f3a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000efe:	e00a      	b.n	8000f16 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f00:	f7ff fa8a 	bl	8000418 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d901      	bls.n	8000f16 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e060      	b.n	8000fd8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f16:	4b33      	ldr	r3, [pc, #204]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 030c 	and.w	r3, r3, #12
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d1ee      	bne.n	8000f00 <HAL_RCC_ClockConfig+0x128>
 8000f22:	e010      	b.n	8000f46 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f24:	f7ff fa78 	bl	8000418 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e04e      	b.n	8000fd8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f3a:	4b2a      	ldr	r3, [pc, #168]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 030c 	and.w	r3, r3, #12
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1ee      	bne.n	8000f24 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <HAL_RCC_ClockConfig+0x208>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d210      	bcs.n	8000f76 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f54:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <HAL_RCC_ClockConfig+0x208>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f023 0207 	bic.w	r2, r3, #7
 8000f5c:	4920      	ldr	r1, [pc, #128]	; (8000fe0 <HAL_RCC_ClockConfig+0x208>)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <HAL_RCC_ClockConfig+0x208>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d001      	beq.n	8000f76 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e030      	b.n	8000fd8 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d008      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	4915      	ldr	r1, [pc, #84]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000f90:	4313      	orrs	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0308 	and.w	r3, r3, #8
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d009      	beq.n	8000fb4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fb4:	f000 f81c 	bl	8000ff0 <HAL_RCC_GetSysClockFreq>
 8000fb8:	4601      	mov	r1, r0
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_RCC_ClockConfig+0x20c>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	091b      	lsrs	r3, r3, #4
 8000fc0:	f003 030f 	and.w	r3, r3, #15
 8000fc4:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <HAL_RCC_ClockConfig+0x210>)
 8000fc6:	5cd3      	ldrb	r3, [r2, r3]
 8000fc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_RCC_ClockConfig+0x214>)
 8000fce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff f9df 	bl	8000394 <HAL_InitTick>
  
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40022000 	.word	0x40022000
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	080015a4 	.word	0x080015a4
 8000fec:	20000008 	.word	0x20000008

08000ff0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ff0:	b490      	push	{r4, r7}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000ff8:	1d3c      	adds	r4, r7, #4
 8000ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001000:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800101a:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	2b04      	cmp	r3, #4
 8001028:	d002      	beq.n	8001030 <HAL_RCC_GetSysClockFreq+0x40>
 800102a:	2b08      	cmp	r3, #8
 800102c:	d003      	beq.n	8001036 <HAL_RCC_GetSysClockFreq+0x46>
 800102e:	e02d      	b.n	800108c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001032:	623b      	str	r3, [r7, #32]
      break;
 8001034:	e02d      	b.n	8001092 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	0c9b      	lsrs	r3, r3, #18
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001042:	4413      	add	r3, r2
 8001044:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001048:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d013      	beq.n	800107c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	0c5b      	lsrs	r3, r3, #17
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001062:	4413      	add	r3, r2
 8001064:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001068:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800106e:	fb02 f203 	mul.w	r2, r2, r3
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	fbb2 f3f3 	udiv	r3, r2, r3
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
 800107a:	e004      	b.n	8001086 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	4a0c      	ldr	r2, [pc, #48]	; (80010b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001080:	fb02 f303 	mul.w	r3, r2, r3
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	623b      	str	r3, [r7, #32]
      break;
 800108a:	e002      	b.n	8001092 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800108e:	623b      	str	r3, [r7, #32]
      break;
 8001090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001092:	6a3b      	ldr	r3, [r7, #32]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3728      	adds	r7, #40	; 0x28
 8001098:	46bd      	mov	sp, r7
 800109a:	bc90      	pop	{r4, r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	08001590 	.word	0x08001590
 80010a4:	080015a0 	.word	0x080015a0
 80010a8:	40021000 	.word	0x40021000
 80010ac:	007a1200 	.word	0x007a1200
 80010b0:	003d0900 	.word	0x003d0900

080010b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <RCC_Delay+0x34>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <RCC_Delay+0x38>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	0a5b      	lsrs	r3, r3, #9
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80010d0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	1e5a      	subs	r2, r3, #1
 80010d6:	60fa      	str	r2, [r7, #12]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1f9      	bne.n	80010d0 <RCC_Delay+0x1c>
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008
 80010ec:	10624dd3 	.word	0x10624dd3

080010f0 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <DWT_Delay+0x3c>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <DWT_Delay+0x40>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a0c      	ldr	r2, [pc, #48]	; (8001134 <DWT_Delay+0x44>)
 8001104:	fba2 2303 	umull	r2, r3, r2, r3
 8001108:	0c9a      	lsrs	r2, r3, #18
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	fb02 f303 	mul.w	r3, r2, r3
 8001110:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8001112:	bf00      	nop
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <DWT_Delay+0x3c>)
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	429a      	cmp	r2, r3
 8001120:	d8f8      	bhi.n	8001114 <DWT_Delay+0x24>
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	e0001000 	.word	0xe0001000
 8001130:	20000008 	.word	0x20000008
 8001134:	431bde83 	.word	0x431bde83

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113e:	f7ff f913 	bl	8000368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001142:	f000 f82b 	bl	800119c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001146:	f000 f86f 	bl	8001228 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  int32_t zero_value=Hx_AvgRead_Value(1,10);
 800114a:	210a      	movs	r1, #10
 800114c:	2001      	movs	r0, #1
 800114e:	f000 f90b 	bl	8001368 <Hx_AvgRead_Value>
 8001152:	4603      	mov	r3, r0
 8001154:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  Hx_Value1=Hx_AvgRead_Value(1,10);
 8001156:	210a      	movs	r1, #10
 8001158:	2001      	movs	r0, #1
 800115a:	f000 f905 	bl	8001368 <Hx_AvgRead_Value>
 800115e:	4602      	mov	r2, r0
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <main+0x54>)
 8001162:	601a      	str	r2, [r3, #0]
	  Hx_Value2=Hx_Value1-zero_value;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <main+0x54>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	4a08      	ldr	r2, [pc, #32]	; (8001190 <main+0x58>)
 800116e:	6013      	str	r3, [r2, #0]
	  Hx_Value3= Hx_Value2/2000;
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <main+0x58>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <main+0x5c>)
 8001176:	fba2 2303 	umull	r2, r3, r2, r3
 800117a:	09db      	lsrs	r3, r3, #7
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f89b 	bl	80002b8 <__aeabi_ui2f>
 8001182:	4602      	mov	r2, r0
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <main+0x60>)
 8001186:	601a      	str	r2, [r3, #0]
	  Hx_Value1=Hx_AvgRead_Value(1,10);
 8001188:	e7e5      	b.n	8001156 <main+0x1e>
 800118a:	bf00      	nop
 800118c:	20000028 	.word	0x20000028
 8001190:	2000002c 	.word	0x2000002c
 8001194:	10624dd3 	.word	0x10624dd3
 8001198:	20000030 	.word	0x20000030

0800119c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b090      	sub	sp, #64	; 0x40
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0318 	add.w	r3, r7, #24
 80011a6:	2228      	movs	r2, #40	; 0x28
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f9dc 	bl	8001568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011be:	2301      	movs	r3, #1
 80011c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011cc:	2301      	movs	r3, #1
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d0:	2302      	movs	r3, #2
 80011d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fb93 	bl	8000910 <HAL_RCC_OscConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011f0:	f000 f8da 	bl	80013a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f4:	230f      	movs	r3, #15
 80011f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f8:	2302      	movs	r3, #2
 80011fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2102      	movs	r1, #2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fde2 	bl	8000dd8 <HAL_RCC_ClockConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800121a:	f000 f8c5 	bl	80013a8 <Error_Handler>
  }
}
 800121e:	bf00      	nop
 8001220:	3740      	adds	r7, #64	; 0x40
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_GPIO_Init+0x90>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <MX_GPIO_Init+0x90>)
 8001242:	f043 0320 	orr.w	r3, r3, #32
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_GPIO_Init+0x90>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0320 	and.w	r3, r3, #32
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_GPIO_Init+0x90>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <MX_GPIO_Init+0x90>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_GPIO_Init+0x90>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001272:	4812      	ldr	r0, [pc, #72]	; (80012bc <MX_GPIO_Init+0x94>)
 8001274:	f7ff fb33 	bl	80008de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800127c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2302      	movs	r3, #2
 8001288:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	4619      	mov	r1, r3
 8001290:	480a      	ldr	r0, [pc, #40]	; (80012bc <MX_GPIO_Init+0x94>)
 8001292:	f7ff f9af 	bl	80005f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	4619      	mov	r1, r3
 80012aa:	4804      	ldr	r0, [pc, #16]	; (80012bc <MX_GPIO_Init+0x94>)
 80012ac:	f7ff f9a2 	bl	80005f4 <HAL_GPIO_Init>

}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40010800 	.word	0x40010800

080012c0 <Hx_SingleRead_Value>:

/* USER CODE BEGIN 4 */
uint32_t Hx_SingleRead_Value(int Gain)
	{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
		uint32_t value1=0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]


		for(int i =0;i<24; i++){
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	e022      	b.n	8001318 <Hx_SingleRead_Value+0x58>
			HAL_GPIO_WritePin(GPIOA , GPIO_PIN_9 , GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d8:	4822      	ldr	r0, [pc, #136]	; (8001364 <Hx_SingleRead_Value+0xa4>)
 80012da:	f7ff fb00 	bl	80008de <HAL_GPIO_WritePin>
			value1=value1 << 1;
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
			DWT_Delay(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff ff03 	bl	80010f0 <DWT_Delay>
			HAL_GPIO_WritePin(GPIOA , GPIO_PIN_9 , GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f0:	481c      	ldr	r0, [pc, #112]	; (8001364 <Hx_SingleRead_Value+0xa4>)
 80012f2:	f7ff faf4 	bl	80008de <HAL_GPIO_WritePin>
			if(HAL_GPIO_ReadPin(GPIOA , GPIO_PIN_10)==1) {
 80012f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fa:	481a      	ldr	r0, [pc, #104]	; (8001364 <Hx_SingleRead_Value+0xa4>)
 80012fc:	f7ff fad8 	bl	80008b0 <HAL_GPIO_ReadPin>
 8001300:	4603      	mov	r3, r0
 8001302:	2b01      	cmp	r3, #1
 8001304:	d105      	bne.n	8001312 <Hx_SingleRead_Value+0x52>
				value1++;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	3301      	adds	r3, #1
 800130a:	617b      	str	r3, [r7, #20]
				DWT_Delay(1);
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff feef 	bl	80010f0 <DWT_Delay>
		for(int i =0;i<24; i++){
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	3301      	adds	r3, #1
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	2b17      	cmp	r3, #23
 800131c:	ddd9      	ble.n	80012d2 <Hx_SingleRead_Value+0x12>
			}

		}

		for(int g =0; g<Gain ; g++)
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	e011      	b.n	8001348 <Hx_SingleRead_Value+0x88>
				{
						HAL_GPIO_WritePin(GPIOA , GPIO_PIN_9 , GPIO_PIN_SET);
 8001324:	2201      	movs	r2, #1
 8001326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800132a:	480e      	ldr	r0, [pc, #56]	; (8001364 <Hx_SingleRead_Value+0xa4>)
 800132c:	f7ff fad7 	bl	80008de <HAL_GPIO_WritePin>
						DWT_Delay(1);
 8001330:	2001      	movs	r0, #1
 8001332:	f7ff fedd 	bl	80010f0 <DWT_Delay>
						HAL_GPIO_WritePin(GPIOA , GPIO_PIN_9 , GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 7100 	mov.w	r1, #512	; 0x200
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <Hx_SingleRead_Value+0xa4>)
 800133e:	f7ff face 	bl	80008de <HAL_GPIO_WritePin>
		for(int g =0; g<Gain ; g++)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3301      	adds	r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbe9      	blt.n	8001324 <Hx_SingleRead_Value+0x64>
				}

				value1= value1 ^ 0x800000;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8001356:	617b      	str	r3, [r7, #20]
				return value1;
 8001358:	697b      	ldr	r3, [r7, #20]

	}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40010800 	.word	0x40010800

08001368 <Hx_AvgRead_Value>:
	uint32_t Hx_AvgRead_Value( int Gain, int times)
			{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
				uint32_t sum_data = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
				for(int i=0;i<times ; i++){
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	e009      	b.n	8001390 <Hx_AvgRead_Value+0x28>

					sum_data+= Hx_SingleRead_Value(Gain);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff9f 	bl	80012c0 <Hx_SingleRead_Value>
 8001382:	4602      	mov	r2, r0
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4413      	add	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
				for(int i=0;i<times ; i++){
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3301      	adds	r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbf1      	blt.n	800137c <Hx_AvgRead_Value+0x14>


				}
				return sum_data/times ;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	fbb2 f3f3 	udiv	r3, r2, r3
			}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_MspInit+0x5c>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	4a14      	ldr	r2, [pc, #80]	; (8001410 <HAL_MspInit+0x5c>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6193      	str	r3, [r2, #24]
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_MspInit+0x5c>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_MspInit+0x5c>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <HAL_MspInit+0x5c>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_MspInit+0x5c>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_MspInit+0x60>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_MspInit+0x60>)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	40021000 	.word	0x40021000
 8001414:	40010000 	.word	0x40010000

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <HardFault_Handler+0x4>

0800142a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <MemManage_Handler+0x4>

08001430 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <BusFault_Handler+0x4>

08001436 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <UsageFault_Handler+0x4>

0800143c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001464:	f7fe ffc6 	bl	80003f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <SystemInit+0x5c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <SystemInit+0x5c>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <SystemInit+0x5c>)
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4911      	ldr	r1, [pc, #68]	; (80014c8 <SystemInit+0x5c>)
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <SystemInit+0x60>)
 8001484:	4013      	ands	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <SystemInit+0x5c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <SystemInit+0x5c>)
 800148e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <SystemInit+0x5c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <SystemInit+0x5c>)
 800149e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <SystemInit+0x5c>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <SystemInit+0x5c>)
 80014aa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80014ae:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <SystemInit+0x5c>)
 80014b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80014b6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <SystemInit+0x64>)
 80014ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014be:	609a      	str	r2, [r3, #8]
#endif 
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	40021000 	.word	0x40021000
 80014cc:	f8ff0000 	.word	0xf8ff0000
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80014d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80014d6:	e003      	b.n	80014e0 <LoopCopyDataInit>

080014d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80014da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80014dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80014de:	3104      	adds	r1, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80014e0:	480a      	ldr	r0, [pc, #40]	; (800150c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80014e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80014e8:	d3f6      	bcc.n	80014d8 <CopyDataInit>
  ldr r2, =_sbss
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80014ec:	e002      	b.n	80014f4 <LoopFillZerobss>

080014ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014f0:	f842 3b04 	str.w	r3, [r2], #4

080014f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014f8:	d3f9      	bcc.n	80014ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014fa:	f7ff ffb7 	bl	800146c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fe:	f000 f80f 	bl	8001520 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001502:	f7ff fe19 	bl	8001138 <main>
  bx lr
 8001506:	4770      	bx	lr
  ldr r3, =_sidata
 8001508:	080015bc 	.word	0x080015bc
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001510:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001514:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001518:	20000038 	.word	0x20000038

0800151c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC1_2_IRQHandler>
	...

08001520 <__libc_init_array>:
 8001520:	b570      	push	{r4, r5, r6, lr}
 8001522:	2500      	movs	r5, #0
 8001524:	4e0c      	ldr	r6, [pc, #48]	; (8001558 <__libc_init_array+0x38>)
 8001526:	4c0d      	ldr	r4, [pc, #52]	; (800155c <__libc_init_array+0x3c>)
 8001528:	1ba4      	subs	r4, r4, r6
 800152a:	10a4      	asrs	r4, r4, #2
 800152c:	42a5      	cmp	r5, r4
 800152e:	d109      	bne.n	8001544 <__libc_init_array+0x24>
 8001530:	f000 f822 	bl	8001578 <_init>
 8001534:	2500      	movs	r5, #0
 8001536:	4e0a      	ldr	r6, [pc, #40]	; (8001560 <__libc_init_array+0x40>)
 8001538:	4c0a      	ldr	r4, [pc, #40]	; (8001564 <__libc_init_array+0x44>)
 800153a:	1ba4      	subs	r4, r4, r6
 800153c:	10a4      	asrs	r4, r4, #2
 800153e:	42a5      	cmp	r5, r4
 8001540:	d105      	bne.n	800154e <__libc_init_array+0x2e>
 8001542:	bd70      	pop	{r4, r5, r6, pc}
 8001544:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001548:	4798      	blx	r3
 800154a:	3501      	adds	r5, #1
 800154c:	e7ee      	b.n	800152c <__libc_init_array+0xc>
 800154e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001552:	4798      	blx	r3
 8001554:	3501      	adds	r5, #1
 8001556:	e7f2      	b.n	800153e <__libc_init_array+0x1e>
 8001558:	080015b4 	.word	0x080015b4
 800155c:	080015b4 	.word	0x080015b4
 8001560:	080015b4 	.word	0x080015b4
 8001564:	080015b8 	.word	0x080015b8

08001568 <memset>:
 8001568:	4603      	mov	r3, r0
 800156a:	4402      	add	r2, r0
 800156c:	4293      	cmp	r3, r2
 800156e:	d100      	bne.n	8001572 <memset+0xa>
 8001570:	4770      	bx	lr
 8001572:	f803 1b01 	strb.w	r1, [r3], #1
 8001576:	e7f9      	b.n	800156c <memset+0x4>

08001578 <_init>:
 8001578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157a:	bf00      	nop
 800157c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800157e:	bc08      	pop	{r3}
 8001580:	469e      	mov	lr, r3
 8001582:	4770      	bx	lr

08001584 <_fini>:
 8001584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001586:	bf00      	nop
 8001588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800158a:	bc08      	pop	{r3}
 800158c:	469e      	mov	lr, r3
 800158e:	4770      	bx	lr
